name: release

on:
  workflow_dispatch:
  merge_group:
  push:
    branches:
      - 'main'
    tags:
      - 'v*'
  pull_request:
    branches:
    - main

jobs:
  release-architectures:
    strategy:
      matrix:
        arch: [amd64, arm64, ppc64le, s390x]
    name: release-${{ matrix.arch }}
    runs-on: ubuntu-latest
    steps:
    - name: Remove Unused Apps
      run: |
        # Remove software and language runtimes we're not using
        sudo rm -rf \
          "$AGENT_TOOLSDIRECTORY" \
          /opt/google/chrome \
          /opt/microsoft/msedge \
          /opt/microsoft/powershell \
          /opt/pipx \
          /usr/lib/mono \
          /usr/local/julia* \
          /usr/local/lib/android \
          /usr/local/lib/node_modules \
          /usr/local/share/chromium \
          /usr/local/share/powershell \
          /usr/share/dotnet \
          /usr/share/swift
        df -h /
    - name: Check out code into the Go module directory
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Install Go
      uses: actions/setup-go@v5
      with:
        go-version-file: "go.mod"

    - name: Docker Login
      if: ${{ github.event_name != 'pull_request' }}
      uses: docker/login-action@v3
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3

    - name: Set the release related variables
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # Release tags.
          echo IMAGE_TAG="${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo GORELEASER_ARGS="--clean --timeout=120m" >> $GITHUB_ENV
          echo ENABLE_RELEASE_PIPELINE=true >> $GITHUB_ENV
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          # Branch build.
          echo IMAGE_TAG="$(echo "${GITHUB_REF#refs/heads/}" | sed -r 's|/+|-|g')" >> $GITHUB_ENV
          echo GORELEASER_ARGS="--clean --skip-validate --timeout=120m" >> $GITHUB_ENV
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          # PR build.
          echo IMAGE_TAG="pr-$(echo "${GITHUB_REF}" | sed -E 's|refs/pull/([^/]+)/?.*|\1|')" >> $GITHUB_ENV
        else
          echo IMAGE_TAG="$(git describe --tags --always)" >> $GITHUB_ENV
        fi

    - name: Run goreleaser
      run: make release-arch-${{ matrix.arch }}
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Move Binary
      run: |
        mkdir -p dist-cache
        mv dist/ansible-operator dist-cache/ansible-operator_linux_${{ matrix.arch }}

    - name: Save binary
      uses: actions/cache/save@v4
      with:
        path: dist-cache/ansible-operator_linux_${{ matrix.arch }}
        key: ${{ matrix.arch }}-${{ github.sha }}


  goreleaser:
    name: goreleaser
    runs-on: ubuntu-latest
    needs: release-architectures
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Restore amd64 binary
      uses: actions/cache/restore@v4
      with:
        path: dist-cache/ansible-operator_linux_amd64
        key: amd64-${{ github.sha }}
        fail-on-cache-miss: true

    - name: Restore arm64 binary
      uses: actions/cache/restore@v4
      with:
        path: dist-cache/ansible-operator_linux_arm64
        key: arm64-${{ github.sha }}
        fail-on-cache-miss: true

    - name: Restore ppc64le binary
      uses: actions/cache/restore@v4
      with:
        path: dist-cache/ansible-operator_linux_ppc64le
        key: ppc64le-${{ github.sha }}
        fail-on-cache-miss: true

    - name: Restore s390x binary
      uses: actions/cache/restore@v4
      with:
        path: dist-cache/ansible-operator_linux_s390x
        key: s390x-${{ github.sha }}
        fail-on-cache-miss: true

    - name: Install Go
      uses: actions/setup-go@v4
      with:
        go-version-file: "go.mod"

    - name: Docker Login
      if: ${{ github.event_name != 'pull_request' }}
      uses: docker/login-action@v2
      with:
        registry: quay.io
        username: ${{ secrets.QUAY_USERNAME }}
        password: ${{ secrets.QUAY_PASSWORD }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2

    - name: Set the release related variables
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          # Release tags.
          echo IMAGE_TAG="${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
          echo GORELEASER_ARGS="--clean --timeout=120m" >> $GITHUB_ENV
          echo ENABLE_RELEASE_PIPELINE=true >> $GITHUB_ENV
        elif [[ $GITHUB_REF == refs/heads/* ]]; then
          # Branch build.
          echo IMAGE_TAG="$(echo "${GITHUB_REF#refs/heads/}" | sed -r 's|/+|-|g')" >> $GITHUB_ENV
          echo GORELEASER_ARGS="--clean --skip-validate --timeout=120m" >> $GITHUB_ENV
        elif [[ $GITHUB_REF == refs/pull/* ]]; then
          # PR build.
          echo IMAGE_TAG="pr-$(echo "${GITHUB_REF}" | sed -E 's|refs/pull/([^/]+)/?.*|\1|')" >> $GITHUB_ENV
        else
          echo IMAGE_TAG="$(git describe --tags --always)" >> $GITHUB_ENV
        fi

    - name: Run goreleaser
      run: make release
      env:
        GITHUB_TOKEN: ${{ github.token }}
